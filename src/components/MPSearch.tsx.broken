import React, { useState, useEffect } from 'react';
import { Search, MapPin, Phone, Mail, ExternalLink, User, Building2, Wifi, WifiOff } from 'lucide-react';
import { apiService, fallbackData, useApiWithFallback, MP as ApiMP } from '../lib/api';
import { mpService } from '../services/mp-service';
import { Input } from './ui/input';
import { Button } from './ui/button';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from './ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from './ui/tabs';
import { Avatar } from './ui/avatar';

const partyColors = {
  'Conservative': 'bg-blue-700 text-white',
  'Labour': 'bg-red-600 text-white',
  'Liberal Democrat': 'bg-yellow-500 text-white',
  'Green': 'bg-green-600 text-white',
  'Scottish National Party': 'bg-yellow-400 text-white',
  'SNP': 'bg-yellow-400 text-white',
  'Plaid Cymru': 'bg-green-500 text-white',
  'DUP': 'bg-red-700 text-white',
  'Sinn Féin': 'bg-green-700 text-white',
  'SDLP': 'bg-green-600 text-white',
  'Alliance': 'bg-yellow-600 text-white',
  'UUP': 'bg-blue-800 text-white',
  'Independent': 'bg-gray-600 text-white'
};

export function MPSearch() {
  const [searchQuery, setSearchQuery] = useState('');
  const [searchTab, setSearchTab] = useState('postcode');
  const [error, setError] = useState('');
  const [selectedMPId, setSelectedMPId] = useState<string | null>(null);
  const [mps, setMps] = useState<MP[]>([]);
  const [searchAttempted, setSearchAttempted] = useState(false);
  const [searchResults, setSearchResults] = useState<MP[]>([]);
  const [searchLoading, setSearchLoading] = useState(false);
  const [searchError, setSearchError] = useState<Error | null>(null);
  const [selectedMP, setSelectedMP] = useState<MP | null>(null);
  const [mpLoading, setMpLoading] = useState(false);

  const { fetchWithFallback, isOnline } = useApiWithFallback();

  const { fetchWithFallback, isOnline } = useApiWithFallback();

  // Load MPs data on component mount
  useEffect(() => {
    loadMPs();
  }, []);

  // Load MP details when selectedMPId changes
  useEffect(() => {
    if (selectedMPId) {
      loadMPDetails(selectedMPId);
    } else {
      setSelectedMP(null);
    }
  }, [selectedMPId]);

  // Load MP details when selectedMPId changes
  useEffect(() => {
    if (selectedMPId) {
      loadMPDetails(selectedMPId);
    } else {
      setSelectedMP(null);
    }
  }, [selectedMPId]);

  const loadMPs = async () => {
    try {
      const data = await fetchWithFallback(
        () => apiService.getAllMPs(),
        () => fallbackData.mps()
      );
      setMps(data);
    } catch (error) {
      console.error('Error loading MPs:', error);
      setError('Failed to load MP data. Please try again later.');
    }
  };

  const loadMPDetails = async (id: string) => {
    setMpLoading(true);
    try {
      const data = await fetchWithFallback(
        () => apiService.getMPById(id),
        async () => {
          // Try to find in local data first
          const localMP = mps.find(mp => mp.id === id);
          if (localMP) return localMP;

          // Otherwise try to load from fallback data
          const allMPs = await fallbackData.mps();
          return allMPs.find(mp => mp.id === id) || null;
        }
      );
      setSelectedMP(data);
    } catch (error) {
      console.error('Error loading MP details:', error);
      setError('Failed to load MP details. Please try again.');
    } finally {
      setMpLoading(false);
    }
  };

  const handleSearch = async () => {
    if (!searchQuery.trim()) {
      setError('Please enter a search term');
      return;
    }

    setError('');
    setSelectedMPId(null);
    setSearchAttempted(true);
    setSearchLoading(true);

    try {
      // Try postcode search first (direct match)
      if (searchTab === 'postcode') {
        const mp = await mpService.findMPByPostcode(searchQuery);
        if (mp) {
          setSelectedMPId(mp.id);
          setSearchLoading(false);
          return;
        }
      }

      // Otherwise perform appropriate search
      let results: MP[] = [];

      try {
        if (searchTab === 'name') {
          results = await mpService.findMPsByName(searchQuery);
        } else if (searchTab === 'constituency') {
          results = await mpService.findMPsByConstituency(searchQuery);
        } else if (searchTab === 'party') {
          results = await mpService.findMPsByParty(searchQuery);
        } else {
          results = await mpService.searchMPs(searchQuery);
        }
      } catch (serviceError) {
        console.warn('MP service search failed, trying API:', serviceError);
        // If service fails, fall back to API
        results = await fetchWithFallback(
          () => apiService.searchMPs({q: searchQuery}),
          () => fallbackData.mps()
        );
      }

      setSearchResults(results);
    } catch (err) {
      console.error('Search error:', err);
      setError('An error occurred during search. Please try again.');
      setSearchResults([]);
    } finally {
      setSearchLoading(false);
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter') {
      handleSearch();
    }
  };

  const handleSelectMP = (mp: MP) => {
    // If we have the full MP data already, set it directly to avoid loading
    if (mp.constituency && mp.party && (mp.email || mp.phone)) {
      setSelectedMP(mp);
      setSelectedMPId(mp.id);
    } else {
      // Otherwise just set the ID and let the useEffect load the details
      setSelectedMPId(mp.id);
    }
  };

export function MPSearch() {
  const [searchQuery, setSearchQuery] = useState('');
  const [searchTab, setSearchTab] = useState('postcode');
  const [error, setError] = useState('');
  const [selectedMPId, setSelectedMPId] = useState<string | null>(null);

  // Use the existing API hook for search results
  const {
    data: searchResults,
    loading: searchLoading,
    error: searchError,
    fetch: performSearch
  } = useApiWithFallback<ApiMP[]>({
    apiFn: () => apiService.searchMPs(searchQuery, searchTab),
    fallbackData: fallbackData.mps,
    dependencies: [searchQuery, searchTab],
    skip: true // Don't auto-fetch, we'll call performSearch manually
  });

  // Use the existing API hook for MP details
  const {
    data: selectedMP,
    loading: mpLoading,
    error: mpError
  } = useApiWithFallback<ApiMP>({
    apiFn: () => apiService.getMPById(selectedMPId || ''),
    fallbackData: null,
    dependencies: [selectedMPId],
    skip: !selectedMPId
  });

  // Preload MP service data for faster searches
  useEffect(() => {
    mpService.loadData().catch(err => {
      console.error('Failed to preload MP data:', err);
    });
  }, []);

  const handleSearch = async () => {
    if (!searchQuery.trim()) {
      setError('Please enter a search term');
      return;
    }

    setError('');
    setSelectedMPId(null);

    try {
      // Perform the search using the API hook
      await performSearch();

      // If it's a postcode search and we get exactly one result, select it automatically
      if (searchTab === 'postcode' && searchResults && searchResults.length === 1) {
        setSelectedMPId(searchResults[0].id);
      }
    } catch (err) {
      console.error('Search error:', err);
      setError('An error occurred during search. Please try again.');
    }
  };

  // Enhanced search using our improved MP service as a fallback
  const handleFallbackSearch = async () => {
    if (!searchQuery.trim()) return;

    try {
      // If the main API search failed or returned no results, try our enhanced service
      if (!searchResults || searchResults.length === 0) {
        let fallbackResults;

        if (searchTab === 'postcode') {
          const mp = await mpService.findMPByPostcode(searchQuery);
          fallbackResults = mp ? [mp] : [];

          // Auto-select the MP when found by postcode
          if (mp) setSelectedMPId(mp.id);
        } else if (searchTab === 'name') {
          fallbackResults = await mpService.findMPsByName(searchQuery);
        } else if (searchTab === 'constituency') {
          fallbackResults = await mpService.findMPsByConstituency(searchQuery);
        } else if (searchTab === 'party') {
          fallbackResults = await mpService.findMPsByParty(searchQuery);
        } else {
          fallbackResults = await mpService.searchMPs(searchQuery);
        }

        // Use fallback results if available
        if (fallbackResults && fallbackResults.length > 0) {
          // TODO: Convert fallbackResults to match ApiMP format if needed
        }
      }
    } catch (fallbackErr) {
      console.error('Fallback search error:', fallbackErr);
    }
  };

  // Call fallback search when main search completes or errors
  useEffect(() => {
    if (!searchLoading && (searchError || (searchResults && searchResults.length === 0))) {
      handleFallbackSearch();
    }
  }, [searchLoading, searchError, searchResults]);

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter') {
      handleSearch();
    }
  };

  const handleSelectMP = (mp: ApiMP) => {
    setSelectedMPId(mp.id);
  };

interface MP {
  id: string;
  name: string;
  displayName: string;
  constituency: string;
  party: string;
  partyColor: string;
  thumbnailUrl: string;
  email?: string;
  phone?: string;
  postcodes: string[];
}

  // Use the MP interface from the API
  type MP = ApiMP;

  const partyColors = {
  'Conservative': 'bg-blue-700 text-white',
  'Labour': 'bg-red-600 text-white',
  'Liberal Democrat': 'bg-yellow-500 text-white',
  'Green': 'bg-green-600 text-white',
  'Scottish National Party': 'bg-yellow-400 text-white',
  'SNP': 'bg-yellow-400 text-white',
  'Plaid Cymru': 'bg-green-500 text-white',
  'DUP': 'bg-red-700 text-white',
  'Sinn Féin': 'bg-green-700 text-white',
  'SDLP': 'bg-green-600 text-white',
  'Alliance': 'bg-yellow-600 text-white',
  'UUP': 'bg-blue-800 text-white',
  'Independent': 'bg-gray-600 text-white'
  };

  export function MPSearch() {
  const [searchQuery, setSearchQuery] = useState('');
  const [searchTab, setSearchTab] = useState('postcode');
  const [error, setError] = useState('');
  const [selectedMPId, setSelectedMPId] = useState<string | null>(null);
  const [mps, setMps] = useState<MP[]>([]);
  const [searchAttempted, setSearchAttempted] = useState(false);
  const [searchResults, setSearchResults] = useState<MP[]>([]);
  const [searchLoading, setSearchLoading] = useState(false);
  const [searchError, setSearchError] = useState<Error | null>(null);

  const { fetchWithFallback, isOnline } = useApiWithFallback();

  // State for selected MP
  const [selectedMP, setSelectedMP] = useState<MP | null>(null);
  const [mpLoading, setMpLoading] = useState(false);

  const { fetchWithFallback, isOnline } = useApiWithFallback();

  // Load MPs data on component mount
  useEffect(() => {
    loadMPs();
  }, []);

  const loadMPs = async () => {
    try {
      const data = await fetchWithFallback(
        () => apiService.getAllMPs(),
        () => fallbackData.mps()
      );
      setMps(data);
    } catch (error) {
      console.error('Error loading MPs:', error);
      setError('Failed to load MP data. Please try again later.');
    }
  };

  const loadMPDetails = async (id: string) => {
    setMpLoading(true);
    try {
      const data = await fetchWithFallback(
        () => apiService.getMPById(id),
        async () => {
          // Try to find in local data first
          const localMP = mps.find(mp => mp.id === id);
          if (localMP) return localMP;

          // Otherwise try to load from fallback data
          const allMPs = await fallbackData.mps();
          return allMPs.find(mp => mp.id === id) || null;
        }
      );
      setSelectedMP(data);
    } catch (error) {
      console.error('Error loading MP details:', error);
      setError('Failed to load MP details. Please try again.');
    } finally {
      setMpLoading(false);
    }
  };

  const handleSearch = async () => {
    if (!searchQuery.trim()) {
      setError('Please enter a search term');
      return;
    }

    setError('');
    setSelectedMPId(null);
    setSearchAttempted(true);
    setSearchLoading(true);

    try {
      // Try postcode search first (direct match)
      if (searchTab === 'postcode') {
        const mp = await mpService.findMPByPostcode(searchQuery);
        if (mp) {
          setSelectedMPId(mp.id);
          setSearchLoading(false);
          return;
        }
      }

      // Otherwise perform appropriate search
      let results: MP[] = [];

      try {
        if (searchTab === 'name') {
          results = await mpService.findMPsByName(searchQuery);
        } else if (searchTab === 'constituency') {
          results = await mpService.findMPsByConstituency(searchQuery);
        } else if (searchTab === 'party') {
          results = await mpService.findMPsByParty(searchQuery);
        } else {
          results = await mpService.searchMPs(searchQuery);
        }
      } catch (serviceError) {
        console.warn('MP service search failed, trying API:', serviceError);
        // If service fails, fall back to API
        results = await fetchWithFallback(
          () => apiService.searchMPs({q: searchQuery}),
          () => fallbackData.mps()
        );
      }

      setSearchResults(results);
    } catch (err) {
      console.error('Search error:', err);
      setError('An error occurred during search. Please try again.');
      setSearchResults([]);
    } finally {
      setSearchLoading(false);
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter') {
      handleSearch();
    }
  };

  const handleSelectMP = (mp: MP) => {
    // If we have the full MP data already, set it directly to avoid loading
    if (mp.constituency && mp.party && (mp.email || mp.phone)) {
      setSelectedMP(mp);
      setSelectedMPId(mp.id);
    } else {
      // Otherwise just set the ID and let the useEffect load the details
      setSelectedMPId(mp.id);
    }
  };

  return (
    <section className="py-16 bg-gray-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        {/* Section Header */}
        <div className="text-center mb-12">
          <div className="inline-flex items-center space-x-2 bg-primary/10 text-primary px-4 py-2 rounded-full text-sm font-medium mb-4">
            <User className="w-4 h-4" />
            <span>Parliamentary Representatives</span>
          </div>

          <h2 className="text-3xl lg:text-4xl font-bold text-gray-900 mb-4">
            Find Your Member of Parliament
          </h2>

          <p className="text-xl text-gray-600 max-w-3xl mx-auto">
            Enter your postcode to find your local MP and get their contact information. 
            Connect directly with your representative in Parliament.
          </p>
        </div>

        {/* Search Interface */}
        <div className="max-w-2xl mx-auto mb-12">
          <Card>
            <CardContent className="pt-6">
              <Tabs value={searchTab} onValueChange={setSearchTab}>
                <TabsList className="grid grid-cols-5 mb-6">
                  <TabsTrigger value="postcode">Postcode</TabsTrigger>
                  <TabsTrigger value="name">Name</TabsTrigger>
                  <TabsTrigger value="constituency">Constituency</TabsTrigger>
                  <TabsTrigger value="party">Party</TabsTrigger>
                  <TabsTrigger value="any">Any</TabsTrigger>
                </TabsList>

                <div className="mt-4">
                  <div className="flex items-center space-x-2 mb-2">
                    <MapPin className="w-5 h-5 text-gray-400" />
                    <label htmlFor="search-input" className="text-sm font-medium text-gray-700">
                      {searchTab === 'postcode' && "Enter your postcode"}
                      {searchTab === 'name' && "Enter MP name"}
                      {searchTab === 'constituency' && "Enter constituency name"}
                      {searchTab === 'party' && "Enter political party"}
                      {searchTab === 'any' && "Search across all MP data"}
                    </label>
                  </div>

                  <div className="flex space-x-3">
                    <Input
                      id="search-input"
                      type="text"
                      placeholder={searchTab === 'postcode' ? "e.g., SW1A 0AA or SW1" : 
                                  searchTab === 'name' ? "e.g., Keir Starmer" :
                                  searchTab === 'constituency' ? "e.g., Manchester Central" :
                                  searchTab === 'party' ? "e.g., Labour or Conservative" :
                                  "Enter search term..."}
                      value={searchQuery}
                      onChange={(e) => setSearchQuery(e.target.value)}
                      onKeyPress={handleKeyPress}
                      className="flex-1"
                    />
                    <Button 
                      onClick={handleSearch}
                      disabled={!searchQuery.trim() || searchLoading}
                      className="bg-primary hover:bg-primary/90"
                    >
                      {searchLoading ? (
                        <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                      ) : (
                        <>
                          <Search className="w-4 h-4 mr-2" />
                          Search
                        </>
                      )}
                    </Button>
                  </div>
                </div>
              </Tabs>

              {error && <p className="text-red-500 mt-2 text-sm">{error}</p>}
            </CardContent>
          </Card>
        </div>

        {/* Data Source Indicator */}
        <div className="max-w-2xl mx-auto mb-8">
          <div className="flex items-center justify-center space-x-2 text-sm text-gray-500">
            {isOnline ? (
              <>
                <Wifi className="w-4 h-4 text-green-500" />
                <span>Connected - Using live parliamentary data</span>
              </>
            ) : (
              <>
                <WifiOff className="w-4 h-4 text-orange-500" />
                <span>Offline mode - Using cached data</span>
              </>
            )}
            <span className="text-gray-400">•</span>
            <span>{mps.length} MPs in database</span>
          </div>
        </div>

  return (
    <section className="py-16 bg-gray-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        {/* Section Header */}
        <div className="text-center mb-12">
          <div className="inline-flex items-center space-x-2 bg-primary/10 text-primary px-4 py-2 rounded-full text-sm font-medium mb-4">
            <User className="w-4 h-4" />
            <span>Parliamentary Representatives</span>
          </div>

          <h2 className="text-3xl lg:text-4xl font-bold text-gray-900 mb-4">
            Find Your Member of Parliament
          </h2>

          <p className="text-xl text-gray-600 max-w-3xl mx-auto">
            Enter your postcode to find your local MP and get their contact information. 
            Connect directly with your representative in Parliament.
          </p>
        </div>

        {/* Search Interface */}
        <div className="max-w-2xl mx-auto mb-12">
          <Card>
            <CardContent className="pt-6">
              <Tabs value={searchTab} onValueChange={setSearchTab}>
                <TabsList className="grid grid-cols-5 mb-6">
                  <TabsTrigger value="postcode">Postcode</TabsTrigger>
                  <TabsTrigger value="name">Name</TabsTrigger>
                  <TabsTrigger value="constituency">Constituency</TabsTrigger>
                  <TabsTrigger value="party">Party</TabsTrigger>
                  <TabsTrigger value="any">Any</TabsTrigger>
                </TabsList>

                <div className="mt-4">
                  <div className="flex items-center space-x-2 mb-2">
                    <MapPin className="w-5 h-5 text-gray-400" />
                    <label htmlFor="search-input" className="text-sm font-medium text-gray-700">
                      {searchTab === 'postcode' && "Enter your postcode"}
                      {searchTab === 'name' && "Enter MP name"}
                      {searchTab === 'constituency' && "Enter constituency name"}
                      {searchTab === 'party' && "Enter political party"}
                      {searchTab === 'any' && "Search across all MP data"}
                    </label>
                  </div>

                  <div className="flex space-x-3">
                    <Input
                      id="search-input"
                      type="text"
                      placeholder={searchTab === 'postcode' ? "e.g., SW1A 0AA or SW1" : 
                                  searchTab === 'name' ? "e.g., Keir Starmer" :
                                  searchTab === 'constituency' ? "e.g., Manchester Central" :
                                  searchTab === 'party' ? "e.g., Labour or Conservative" :
                                  "Enter search term..."}
                      value={searchQuery}
                      onChange={(e) => setSearchQuery(e.target.value)}
                      onKeyPress={handleKeyPress}
                      className="flex-1"
                    />
                    <Button 
                      onClick={handleSearch}
                      disabled={!searchQuery.trim() || searchLoading}
                      className="bg-primary hover:bg-primary/90"
                    >
                      {searchLoading ? (
                        <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                      ) : (
                        <>
                          <Search className="w-4 h-4 mr-2" />
                          Search
                        </>
                      )}
                    </Button>
                  </div>
                </div>
              </Tabs>

              {error && <p className="text-red-500 mt-2 text-sm">{error}</p>}
            </CardContent>
          </Card>
        </div>

        {/* Data Source Indicator */}
        <div className="max-w-2xl mx-auto mb-8">
          <div className="flex items-center justify-center space-x-2 text-sm text-gray-500">
            {isOnline ? (
              <>
                <Wifi className="w-4 h-4 text-green-500" />
                <span>Connected - Using live parliamentary data</span>
              </>
            ) : (
              <>
                <WifiOff className="w-4 h-4 text-orange-500" />
                <span>Offline mode - Using cached data</span>
              </>
            )}
            <span className="text-gray-400">•</span>
            <span>{mps.length} MPs in database</span>
          </div>
        </div>

        {/* Search Results */}
        {searchLoading && (
          <div className="text-center py-8">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4"></div>
            <p className="text-gray-600">Searching for your MP...</p>
          </div>
        )}

        {selectedMP && !searchLoading && (
          <div className="max-w-4xl mx-auto">
            <Card>
              <CardContent className="p-6">
                <div className="grid md:grid-cols-3 gap-6">
                  {/* MP Photo and Basic Info */}
                  <div className="space-y-4">
                    <div className="aspect-square rounded-lg bg-gray-100 overflow-hidden">
                      <img 
                        src={selectedMP.thumbnailUrl || selectedMP.image || '/images/mp-placeholder.jpg'} 
                        alt={selectedMP.displayName || selectedMP.name}
                        className="w-full h-full object-cover"
                        onError={(e) => {
                          const target = e.target as HTMLImageElement;
                          target.src = '/images/mp-placeholder.jpg';
                        }}
                      />
                    </div>

                    <div className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${partyColors[selectedMP.party as keyof typeof partyColors] || 'bg-gray-600 text-white'}`}>
                      {selectedMP.party}
                    </div>

                    {selectedMP.isActive !== undefined && (
                      <div className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
                        selectedMP.isActive ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'
                      }`}>
                        {selectedMP.isActive ? 'Current MP' : 'Former MP'}
                      </div>
                    )}
                  </div>

                  {/* MP Details */}
                  <div className="md:col-span-2 space-y-6">
                    <div>
                      <h3 className="text-2xl font-bold text-gray-900 mb-2">{selectedMP.displayName || selectedMP.name}</h3>
                      {selectedMP.fullTitle && selectedMP.fullTitle !== selectedMP.displayName && (
                        <p className="text-lg text-gray-700 mb-2">{selectedMP.fullTitle}</p>
                      )}
                      <div className="flex items-center space-x-2 text-lg text-gray-600 mb-4">
                        <Building2 className="w-5 h-5" />
                        <span>MP for {selectedMP.constituency}</span>
                      </div>
                    </div>

                    {/* Contact Information */}
                    <div className="space-y-4">
                      <h4 className="text-lg font-semibold text-gray-900">Contact Information</h4>

                      <div className="grid sm:grid-cols-2 gap-4">
                        {selectedMP.email && (
                          <div className="flex items-start space-x-3">
                            <Mail className="w-5 h-5 text-primary mt-0.5" />
                            <div>
                              <p className="text-sm text-gray-500">Email</p>
                              <a 
                                href={`mailto:${selectedMP.email}`}
                                className="text-primary hover:underline break-all"
                              >
                                {selectedMP.email}
                              </a>
                            </div>
                          </div>
                        )}

                        {selectedMP.phone && (
                          <div className="flex items-start space-x-3">
                            <Phone className="w-5 h-5 text-primary mt-0.5" />
                            <div>
                              <p className="text-sm text-gray-500">Phone</p>
                              <a 
                                href={`tel:${selectedMP.phone}`}
                                className="text-primary hover:underline"
                              >
                                {selectedMP.phone}
                              </a>
                            </div>
                          </div>
                        )}
                      </div>

                      {(selectedMP.addresses?.[0]?.fullAddress || selectedMP.address) && (
                        <div className="flex items-start space-x-3">
                          <MapPin className="w-5 h-5 text-primary mt-0.5" />
                          <div>
                            <p className="text-sm text-gray-500">Address</p>
                            <p className="text-gray-700">{selectedMP.addresses?.[0]?.fullAddress || selectedMP.address}</p>
                          </div>
                        </div>
                      )}

                      {/* Postcodes covered */}
                      {selectedMP.postcodes && selectedMP.postcodes.length > 0 && (
                        <div className="flex items-start space-x-3">
                          <MapPin className="w-5 h-5 text-primary mt-0.5" />
                          <div>
                            <p className="text-sm text-gray-500">Sample Postcodes</p>
                            <p className="text-gray-700">{selectedMP.postcodes.slice(0, 5).join(', ')}</p>
                            {selectedMP.postcodes.length > 5 && (
                              <p className="text-xs text-gray-500">and {selectedMP.postcodes.length - 5} more...</p>
                            )}
                          </div>
                        </div>
                      )}

                      {(selectedMP.website || selectedMP.socialMedia?.website) && (
                        <div className="pt-4">
                          <a 
                            href={selectedMP.website || selectedMP.socialMedia?.website}
                            target="_blank"
                            rel="noopener noreferrer"
                            className="inline-flex items-center space-x-2 text-primary hover:text-primary/80 font-medium"
                          >
                            <span>Visit official website</span>
                            <ExternalLink className="w-4 h-4" />
                          </a>
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              </CardContent>
              <CardFooter>
                <Button variant="outline" onClick={() => setSelectedMPId(null)} className="w-full">
                  Back to search
                </Button>
              </CardFooter>
            </Card>
          </div>
        )}

        {/* Display search results if we have them but no selected MP */}
        {!selectedMP && searchResults && searchResults.length > 0 && !searchLoading && (
          <div className="mb-12">
            <h3 className="text-2xl font-bold text-gray-900 mb-6 text-center">Search Results</h3>
            <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
              {searchResults.map((mp) => (
                <Card key={mp.id} className="cursor-pointer hover:shadow-lg transition-all" onClick={() => handleSelectMP(mp)}>
                  <CardContent className="p-6">
                    <div className="flex items-center space-x-4">
                      <Avatar className="h-16 w-16">
                        <img 
                          src={mp.thumbnailUrl || mp.image || '/images/mp-placeholder.jpg'} 
                          alt={mp.displayName || mp.name}
                          onError={(e) => {
                            const target = e.target as HTMLImageElement;
                            target.src = '/images/mp-placeholder.jpg';
                          }}
                        />
                      </Avatar>
                      <div>
                        <h4 className="font-semibold text-gray-900">{mp.displayName || mp.name}</h4>
                        <p className="text-sm text-gray-600">{mp.constituency}</p>
                        <div className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium mt-1 ${partyColors[mp.party as keyof typeof partyColors] || 'bg-gray-600 text-white'}`}>
                          {mp.party}
                        </div>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </div>
        )}

        {searchAttempted && !selectedMP && !searchLoading && (!searchResults || searchResults.length === 0) && (
          <div className="text-center py-8">
            <Card className="max-w-md mx-auto">
              <CardContent className="pt-6 text-center">
                <Search className="w-12 h-12 text-gray-400 mx-auto mb-4" />
                <CardTitle className="mb-2">No MP Found</CardTitle>
                <CardDescription className="text-base mb-4">
                  We couldn't find an MP for "{searchQuery}". Please check your search term or try a different search method.
                </CardDescription>
                <p className="text-sm text-gray-500">
                  Try using a full UK postcode (e.g., SW1A 0AA) or constituency name.
                </p>
              </CardContent>
            </Card>
          </div>
        )}

        {/* Sample MPs Display */}
        {!searchAttempted && !selectedMP && (
          <div className="space-y-8">
            <div className="text-center">
              <h3 className="text-2xl font-bold text-gray-900 mb-4">Sample MPs</h3>
              <p className="text-gray-600">Here are some example MPs you can search for:</p>
            </div>

            <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
              {mps.slice(0, 6).map((mp) => (
                <Card key={mp.id} className="cursor-pointer hover:shadow-lg transition-all" onClick={() => handleSelectMP(mp)}>
                  <CardContent className="p-6 text-center">
                    <Avatar className="h-20 w-20 mx-auto mb-4">
                      <img 
                        src={mp.thumbnailUrl || mp.image || '/images/mp-placeholder.jpg'} 
                        alt={mp.displayName || mp.name}
                        className="object-cover"
                        onError={(e) => {
                          const target = e.target as HTMLImageElement;
                          target.src = '/images/mp-placeholder.jpg';
                        }}
                      />
                    </Avatar>
                    <h4 className="font-semibold text-gray-900">{mp.displayName || mp.name}</h4>
                    <p className="text-sm text-gray-600 mb-2">{mp.constituency}</p>
                    <div className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${partyColors[mp.party as keyof typeof partyColors] || 'bg-gray-600 text-white'}`}>
                      {mp.party}
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </div>
        )}
        </div>
            </section>
          );
        }

        export default MPSearch;

        {/* Search Results */}
        {searchLoading && (
          <div className="text-center py-8">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4"></div>
            <p className="text-gray-600">Searching for your MP...</p>
          </div>
        )}

        {selectedMP && !searchLoading && (
          <div className="max-w-4xl mx-auto">
            <Card>
              <CardContent className="p-6">
                <div className="grid md:grid-cols-3 gap-6">
                  {/* MP Photo and Basic Info */}
                  <div className="space-y-4">
                    <div className="aspect-square rounded-lg bg-gray-100 overflow-hidden">
                      <img 
                        src={selectedMP.thumbnailUrl || selectedMP.image || '/images/mp-placeholder.jpg'} 
                        alt={selectedMP.displayName || selectedMP.name}
                        className="w-full h-full object-cover"
                        onError={(e) => {
                          const target = e.target as HTMLImageElement;
                          target.src = '/images/mp-placeholder.jpg';
                        }}
                      />
                    </div>

                    <div className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${partyColors[selectedMP.party as keyof typeof partyColors] || 'bg-gray-600 text-white'}`}>
                      {selectedMP.party}
                    </div>

                    {selectedMP.isActive !== undefined && (
                      <div className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
                        selectedMP.isActive ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'
                      }`}>
                        {selectedMP.isActive ? 'Current MP' : 'Former MP'}
                      </div>
                    )}
                  </div>

                  {/* MP Details */}
                  <div className="md:col-span-2 space-y-6">
                    <div>
                      <h3 className="text-2xl font-bold text-gray-900 mb-2">{selectedMP.displayName || selectedMP.name}</h3>
                      {selectedMP.fullTitle && selectedMP.fullTitle !== selectedMP.displayName && (
                        <p className="text-lg text-gray-700 mb-2">{selectedMP.fullTitle}</p>
                      )}
                      <div className="flex items-center space-x-2 text-lg text-gray-600 mb-4">
                        <Building2 className="w-5 h-5" />
                        <span>MP for {selectedMP.constituency}</span>
                      </div>
                    </div>

                    {/* Contact Information */}
                    <div className="space-y-4">
                      <h4 className="text-lg font-semibold text-gray-900">Contact Information</h4>

                      <div className="grid sm:grid-cols-2 gap-4">
                        {selectedMP.email && (
                          <div className="flex items-start space-x-3">
                            <Mail className="w-5 h-5 text-primary mt-0.5" />
                            <div>
                              <p className="text-sm text-gray-500">Email</p>
                              <a 
                                href={`mailto:${selectedMP.email}`}
                                className="text-primary hover:underline break-all"
                              >
                                {selectedMP.email}
                              </a>
                            </div>
                          </div>
                        )}

                        {selectedMP.phone && (
                          <div className="flex items-start space-x-3">
                            <Phone className="w-5 h-5 text-primary mt-0.5" />
                            <div>
                              <p className="text-sm text-gray-500">Phone</p>
                              <a 
                                href={`tel:${selectedMP.phone}`}
                                className="text-primary hover:underline"
                              >
                                {selectedMP.phone}
                              </a>
                            </div>
                          </div>
                        )}
                      </div>

                      {(selectedMP.addresses?.[0]?.fullAddress || selectedMP.address) && (
                        <div className="flex items-start space-x-3">
                          <MapPin className="w-5 h-5 text-primary mt-0.5" />
                          <div>
                            <p className="text-sm text-gray-500">Address</p>
                            <p className="text-gray-700">{selectedMP.addresses?.[0]?.fullAddress || selectedMP.address}</p>
                          </div>
                        </div>
                      )}

                      {/* Postcodes covered */}
                      {selectedMP.postcodes && selectedMP.postcodes.length > 0 && (
                        <div className="flex items-start space-x-3">
                          <MapPin className="w-5 h-5 text-primary mt-0.5" />
                          <div>
                            <p className="text-sm text-gray-500">Sample Postcodes</p>
                            <p className="text-gray-700">{selectedMP.postcodes.slice(0, 5).join(', ')}</p>
                            {selectedMP.postcodes.length > 5 && (
                              <p className="text-xs text-gray-500">and {selectedMP.postcodes.length - 5} more...</p>
                            )}
                          </div>
                        </div>
                      )}

                      {(selectedMP.website || selectedMP.socialMedia?.website) && (
                        <div className="pt-4">
                          <a 
                            href={selectedMP.website || selectedMP.socialMedia?.website}
                            target="_blank"
                            rel="noopener noreferrer"
                            className="inline-flex items-center space-x-2 text-primary hover:text-primary/80 font-medium"
                          >
                            <span>Visit official website</span>
                            <ExternalLink className="w-4 h-4" />
                          </a>
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              </CardContent>
              <CardFooter>
                <Button variant="outline" onClick={() => setSelectedMPId(null)} className="w-full">
                  Back to search
                </Button>
              </CardFooter>
            </Card>
          </div>
        )}

        {/* Display search results if we have them but no selected MP */}
        {!selectedMP && searchResults && searchResults.length > 0 && !searchLoading && (
          <div className="mb-12">
            <h3 className="text-2xl font-bold text-gray-900 mb-6 text-center">Search Results</h3>
            <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
              {searchResults.map((mp) => (
                <Card key={mp.id} className="cursor-pointer hover:shadow-lg transition-all" onClick={() => handleSelectMP(mp)}>
                  <CardContent className="p-6">
                    <div className="flex items-center space-x-4">
                      <Avatar className="h-16 w-16">
                        <img 
                          src={mp.thumbnailUrl || mp.image || '/images/mp-placeholder.jpg'} 
                          alt={mp.displayName || mp.name}
                          onError={(e) => {
                            const target = e.target as HTMLImageElement;
                            target.src = '/images/mp-placeholder.jpg';
                          }}
                        />
                      </Avatar>
                      <div>
                        <h4 className="font-semibold text-gray-900">{mp.displayName || mp.name}</h4>
                        <p className="text-sm text-gray-600">{mp.constituency}</p>
                        <div className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium mt-1 ${partyColors[mp.party as keyof typeof partyColors] || 'bg-gray-600 text-white'}`}>
                          {mp.party}
                        </div>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </div>
        )}

        {/* Sample MPs Display */}
        {!searchAttempted && !selectedMP && (
          <div className="space-y-8">
            <div className="text-center">
              <h3 className="text-2xl font-bold text-gray-900 mb-4">Sample MPs</h3>
              <p className="text-gray-600">Here are some example MPs you can search for:</p>
            </div>

            <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
              {mps.slice(0, 6).map((mp) => (
                <Card key={mp.id} className="cursor-pointer hover:shadow-lg transition-all" onClick={() => handleSelectMP(mp)}>
                  <CardContent className="p-6 text-center">
                    <Avatar className="h-20 w-20 mx-auto mb-4">
                      <img 
                        src={mp.thumbnailUrl || mp.image || '/images/mp-placeholder.jpg'} 
                        alt={mp.displayName || mp.name}
                        className="object-cover"
                        onError={(e) => {
                          const target = e.target as HTMLImageElement;
                          target.src = '/images/mp-placeholder.jpg';
                        }}
                      />
                    </Avatar>
                    <h4 className="font-semibold text-gray-900">{mp.displayName || mp.name}</h4>
                    <p className="text-sm text-gray-600 mb-2">{mp.constituency}</p>
                    <div className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${partyColors[mp.party as keyof typeof partyColors] || 'bg-gray-600 text-white'}`}>
                      {mp.party}
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </div>
        )}
              </div>
            </section>
          );
        }

        // Export the component as default
        export default MPSearch;

        {searchAttempted && !selectedMP && !searchLoading && (!searchResults || searchResults.length === 0) && (
          <div className="text-center py-8">
            <Card className="max-w-md mx-auto">
              <CardContent className="pt-6 text-center">
                <Search className="w-12 h-12 text-gray-400 mx-auto mb-4" />
                <CardTitle className="mb-2">No MP Found</CardTitle>
                <CardDescription className="text-base mb-4">
                  We couldn't find an MP for "{searchQuery}". Please check your search term or try a different search method.
                </CardDescription>
                <p className="text-sm text-gray-500">
                  Try using a full UK postcode (e.g., SW1A 0AA) or constituency name.
                </p>
              </CardContent>
            </Card>
          </div>
        )}

  // Use the existing API hook for search results
  const {
    data: searchResults,
    loading: searchLoading,
    error: searchError,
    fetch: performSearch
  } = useApiWithFallback<ApiMP[]>({
    apiFn: () => apiService.searchMPs(searchQuery, searchTab),
    fallbackData: fallbackData.mps,
    dependencies: [searchQuery, searchTab],
    skip: true // Don't auto-fetch, we'll call performSearch manually
  });

  // Use the existing API hook for MP details
  const {
    data: selectedMP,
    loading: mpLoading,
    error: mpError
  } = useApiWithFallback<ApiMP>({
    apiFn: () => apiService.getMPById(selectedMPId || ''),
    fallbackData: null,
    dependencies: [selectedMPId],
    skip: !selectedMPId
  });

  // Preload MP service data for faster searches
  useEffect(() => {
    mpService.loadData().catch(err => {
      console.error('Failed to preload MP data:', err);
    });
  }, []);

  const handleSearch = async () => {
    if (!searchQuery.trim()) {
      setError('Please enter a search term');
      return;
    }

    setError('');
    setSelectedMPId(null);

    try {
      // Perform the search using the API hook
      await performSearch();

      // If it's a postcode search and we get exactly one result, select it automatically
      if (searchTab === 'postcode' && searchResults && searchResults.length === 1) {
        setSelectedMPId(searchResults[0].id);
      }
    } catch (err) {
      console.error('Search error:', err);
      setError('An error occurred during search. Please try again.');
    }
  };

  // Enhanced search using our improved MP service as a fallback
  const handleFallbackSearch = async () => {
    if (!searchQuery.trim()) return;

    try {
      // If the main API search failed or returned no results, try our enhanced service
      if (!searchResults || searchResults.length === 0) {
        let fallbackResults;

        if (searchTab === 'postcode') {
          const mp = await mpService.findMPByPostcode(searchQuery);
          fallbackResults = mp ? [mp] : [];

          // Auto-select the MP when found by postcode
          if (mp) setSelectedMPId(mp.id);
        } else if (searchTab === 'name') {
          fallbackResults = await mpService.findMPsByName(searchQuery);
        } else if (searchTab === 'constituency') {
          fallbackResults = await mpService.findMPsByConstituency(searchQuery);
        } else if (searchTab === 'party') {
          fallbackResults = await mpService.findMPsByParty(searchQuery);
        } else {
          fallbackResults = await mpService.searchMPs(searchQuery);
        }

        // Use fallback results if available
        if (fallbackResults && fallbackResults.length > 0) {
          // TODO: Convert fallbackResults to match ApiMP format if needed
        }
      }
    } catch (fallbackErr) {
      console.error('Fallback search error:', fallbackErr);
    }
  };

  // Call fallback search when main search completes or errors
  useEffect(() => {
    if (!searchLoading && (searchError || (searchResults && searchResults.length === 0))) {
      handleFallbackSearch();
    }
  }, [searchLoading, searchError, searchResults]);

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter') {
      handleSearch();
    }
  };

  const handleSelectMP = (mp: ApiMP) => {
    setSelectedMPId(mp.id);
  };

  return (
    <div className="mp-search p-4 max-w-4xl mx-auto">
      <Card>
        <CardHeader>
          <CardTitle className="text-2xl font-bold">Find Your MP</CardTitle>
          <CardDescription>
            Search for Members of Parliament by postcode, name, constituency, or party
          </CardDescription>
        </CardHeader>
        <CardContent>
          <Tabs value={searchTab} onValueChange={setSearchTab}>
            <TabsList className="grid grid-cols-5 mb-4">
              <TabsTrigger value="postcode">Postcode</TabsTrigger>
              <TabsTrigger value="name">Name</TabsTrigger>
              <TabsTrigger value="constituency">Constituency</TabsTrigger>
              <TabsTrigger value="party">Party</TabsTrigger>
              <TabsTrigger value="any">Any</TabsTrigger>
            </TabsList>

            <TabsContent value="postcode">
              <div className="flex gap-2">
                <Input
                  placeholder="Enter postcode (e.g. SW1A 0AA)"
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  onKeyPress={handleKeyPress}
                  className="flex-1"
                />
                <Button onClick={handleSearch} disabled={searchLoading}>
                  {searchLoading ? 'Searching...' : 'Search'}
                </Button>
              </div>
            </TabsContent>

            <TabsContent value="name">
              <div className="flex gap-2">
                <Input
                  placeholder="Enter MP name (e.g. John Smith)"
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  onKeyPress={handleKeyPress}
                  className="flex-1"
                />
                <Button onClick={handleSearch} disabled={searchLoading}>
                  {searchLoading ? 'Searching...' : 'Search'}
                </Button>
              </div>
            </TabsContent>

            <TabsContent value="constituency">
              <div className="flex gap-2">
                <Input
                  placeholder="Enter constituency name (e.g. Manchester Central)"
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  onKeyPress={handleKeyPress}
                  className="flex-1"
                />
                <Button onClick={handleSearch} disabled={searchLoading}>
                  {searchLoading ? 'Searching...' : 'Search'}
                </Button>
              </div>
            </TabsContent>

            <TabsContent value="party">
              <div className="flex gap-2">
                <Input
                  placeholder="Enter party name (e.g. Labour, Conservative)"
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  onKeyPress={handleKeyPress}
                  className="flex-1"
                />
                <Button onClick={handleSearch} disabled={searchLoading}>
                  {searchLoading ? 'Searching...' : 'Search'}
                </Button>
              </div>
            </TabsContent>

            <TabsContent value="any">
              <div className="flex gap-2">
                <Input
                  placeholder="Search across all MP data"
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  onKeyPress={handleKeyPress}
                  className="flex-1"
                />
                <Button onClick={handleSearch} disabled={searchLoading}>
                  {searchLoading ? 'Searching...' : 'Search'}
                </Button>
              </div>
            </TabsContent>
          </Tabs>

  return (
    <div className="mp-search p-4 max-w-4xl mx-auto">
      <Card>
        <CardHeader>
          <CardTitle className="text-2xl font-bold">Find Your MP</CardTitle>
          <CardDescription>
            Search for Members of Parliament by postcode, name, constituency, or party
          </CardDescription>
        </CardHeader>
        <CardContent>
          <Tabs value={searchTab} onValueChange={setSearchTab}>
            <TabsList className="grid grid-cols-5 mb-4">
              <TabsTrigger value="postcode">Postcode</TabsTrigger>
              <TabsTrigger value="name">Name</TabsTrigger>
              <TabsTrigger value="constituency">Constituency</TabsTrigger>
              <TabsTrigger value="party">Party</TabsTrigger>
              <TabsTrigger value="any">Any</TabsTrigger>
            </TabsList>

            <TabsContent value="postcode">
              <div className="flex gap-2">
                <Input
                  placeholder="Enter postcode (e.g. SW1A 0AA)"
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  onKeyPress={handleKeyPress}
                  className="flex-1"
                />
                <Button onClick={handleSearch} disabled={searchLoading}>
                  {searchLoading ? 'Searching...' : 'Search'}
                </Button>
              </div>
            </TabsContent>

            <TabsContent value="name">
              <div className="flex gap-2">
                <Input
                  placeholder="Enter MP name (e.g. John Smith)"
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  onKeyPress={handleKeyPress}
                  className="flex-1"
                />
                <Button onClick={handleSearch} disabled={searchLoading}>
                  {searchLoading ? 'Searching...' : 'Search'}
                </Button>
              </div>
            </TabsContent>

            <TabsContent value="constituency">
              <div className="flex gap-2">
                <Input
                  placeholder="Enter constituency name (e.g. Manchester Central)"
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  onKeyPress={handleKeyPress}
                  className="flex-1"
                />
                <Button onClick={handleSearch} disabled={searchLoading}>
                  {searchLoading ? 'Searching...' : 'Search'}
                </Button>
              </div>
            </TabsContent>

            <TabsContent value="party">
              <div className="flex gap-2">
                <Input
                  placeholder="Enter party name (e.g. Labour, Conservative)"
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  onKeyPress={handleKeyPress}
                  className="flex-1"
                />
                <Button onClick={handleSearch} disabled={searchLoading}>
                  {searchLoading ? 'Searching...' : 'Search'}
                </Button>
              </div>
            </TabsContent>

            <TabsContent value="any">
              <div className="flex gap-2">
                <Input
                  placeholder="Search across all MP data"
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  onKeyPress={handleKeyPress}
                  className="flex-1"
                />
                <Button onClick={handleSearch} disabled={searchLoading}>
                  {searchLoading ? 'Searching...' : 'Search'}
                </Button>
              </div>
            </TabsContent>
          </Tabs>

          {error && <p className="text-red-500 mt-2">{error}</p>}
          {searchError && <p className="text-red-500 mt-2">Search error: Please try again</p>}

          {searchResults && searchResults.length > 0 && !selectedMP && (
            <div className="mt-6">
              <h3 className="text-lg font-semibold mb-2">Search Results</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {searchResults.map((mp) => (
                  <Card key={mp.id} className="cursor-pointer hover:bg-gray-50" onClick={() => handleSelectMP(mp)}>
                    <CardContent className="p-4 flex items-center gap-4">
                      <Avatar className="h-12 w-12">
                        <img 
                          src={mp.thumbnailUrl || '/placeholder-mp.jpg'} 
                          alt={mp.displayName} 
                          onError={(e) => {
                            const target = e.target as HTMLImageElement;
                            target.src = '/placeholder-mp.jpg';
                          }}
                        />
                      </Avatar>
                      <div>
                        <h4 className="font-medium">{mp.displayName}</h4>
                        <p className="text-sm text-gray-500">{mp.constituency}</p>
                        <div 
                          className="text-xs px-2 py-1 rounded-full inline-block mt-1" 
                          style={{
                            backgroundColor: mp.partyColor || '#ccc',
                            color: '#fff'
                          }}
                        >
                          {mp.party}
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </div>
            </div>
          )}

          {error && <p className="text-red-500 mt-2">{error}</p>}
          {searchError && <p className="text-red-500 mt-2">Search error: Please try again</p>}

          {searchResults && searchResults.length > 0 && !selectedMP && (
            <div className="mt-6">
              <h3 className="text-lg font-semibold mb-2">Search Results</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {searchResults.map((mp) => (
                  <Card key={mp.id} className="cursor-pointer hover:bg-gray-50" onClick={() => handleSelectMP(mp)}>
                    <CardContent className="p-4 flex items-center gap-4">
                      <Avatar className="h-12 w-12">
                        <img 
                          src={mp.thumbnailUrl || '/placeholder-mp.jpg'} 
                          alt={mp.displayName} 
                          onError={(e) => {
                            const target = e.target as HTMLImageElement;
                            target.src = '/placeholder-mp.jpg';
                          }}
                        />
                      </Avatar>
                      <div>
                        <h4 className="font-medium">{mp.displayName}</h4>
                        <p className="text-sm text-gray-500">{mp.constituency}</p>
                        <div 
                          className="text-xs px-2 py-1 rounded-full inline-block mt-1" 
                          style={{
                            backgroundColor: mp.partyColor || '#ccc',
                            color: '#fff'
                          }}
                        >
                          {mp.party}
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </div>
            </div>
          )}
                  </CardContent>
                </Card>
              </div>
            );
          }

          // Use the MP interface from the API
          type MP = ApiMP;

          const partyColors = {
            'Conservative': 'party-conservative',
            'Labour': 'party-labour',
            'SNP': 'party-snp',
            'Green': 'party-green',
            'Liberal Democrat': 'party-libdem',
          };

          // Export the component as default
          export default MPSearch;

          {selectedMP && (
            <div className="mt-6">
              <Button variant="outline" size="sm" onClick={() => setSelectedMPId(null)} className="mb-4">
                Back to results
              </Button>

              <Card>
                <CardHeader className="pb-2">
                  <div className="flex items-center gap-4">
                    <Avatar className="h-16 w-16">
                      <img 
                        src={selectedMP.thumbnailUrl || '/placeholder-mp.jpg'} 
                        alt={selectedMP.displayName} 
                        onError={(e) => {
                          const target = e.target as HTMLImageElement;
                          target.src = '/placeholder-mp.jpg';
                        }}
                      />
                    </Avatar>
                    <div>
                      <CardTitle>{selectedMP.displayName}</CardTitle>
                      <CardDescription className="text-base">
                        MP for {selectedMP.constituency}
                      </CardDescription>
                      <div 
                        className="text-xs px-2 py-1 rounded-full inline-block mt-1" 
                        style={{
                          backgroundColor: selectedMP.partyColor || '#ccc',
                          color: '#fff'
                        }}
                      >
                        {selectedMP.party}
                      </div>
                    </div>
                  </div>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-1 gap-4 mt-4">
                    {selectedMP.email && (
                      <div>
                        <h4 className="font-medium text-sm">Email:</h4>
                        <a href={`mailto:${selectedMP.email}`} className="text-blue-600 hover:underline">
                          {selectedMP.email}
                        </a>
                      </div>
                    )}

                    {selectedMP.phone && (
                      <div>
                        <h4 className="font-medium text-sm">Phone:</h4>
                        <a href={`tel:${selectedMP.phone}`} className="text-blue-600 hover:underline">
                          {selectedMP.phone}
                        </a>
                      </div>
                    )}

                    {selectedMP.postcodes && selectedMP.postcodes.length > 0 && (
                      <div>
                        <h4 className="font-medium text-sm">Sample Postcodes in Constituency:</h4>
                        <p className="text-gray-600">
                          {selectedMP.postcodes.slice(0, 5).join(', ')}
                          {selectedMP.postcodes.length > 5 ? '...' : ''}
                        </p>
                      </div>
                    )}
                  </div>
                </CardContent>
                <CardFooter>
                  <Button asChild className="w-full">
                    <a 
                      href={`https://members.parliament.uk/member/${selectedMP.parliamentId || selectedMP.id.replace('mp-', '')}/contact`} 
                      target="_blank" 
                      rel="noopener noreferrer"
                    >
                      Contact on Parliament Website
                    </a>
                  </Button>
                </CardFooter>
              </Card>
            </div>
          )}

          {selectedMP && (
            <div className="mt-6">
              <Button variant="outline" size="sm" onClick={() => setSelectedMPId(null)} className="mb-4">
                Back to results
              </Button>

              <Card>
                <CardHeader className="pb-2">
                  <div className="flex items-center gap-4">
                    <Avatar className="h-16 w-16">
                      <img 
                        src={selectedMP.thumbnailUrl || '/placeholder-mp.jpg'} 
                        alt={selectedMP.displayName} 
                        onError={(e) => {
                          const target = e.target as HTMLImageElement;
                          target.src = '/placeholder-mp.jpg';
                        }}
                      />
                    </Avatar>
                    <div>
                      <CardTitle>{selectedMP.displayName}</CardTitle>
                      <CardDescription className="text-base">
                        MP for {selectedMP.constituency}
                      </CardDescription>
                      <div 
                        className="text-xs px-2 py-1 rounded-full inline-block mt-1" 
                        style={{
                          backgroundColor: selectedMP.partyColor || '#ccc',
                          color: '#fff'
                        }}
                      >
                        {selectedMP.party}
                      </div>
                    </div>
                  </div>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-1 gap-4 mt-4">
                    {selectedMP.email && (
                      <div>
                        <h4 className="font-medium text-sm">Email:</h4>
                        <a href={`mailto:${selectedMP.email}`} className="text-blue-600 hover:underline">
                          {selectedMP.email}
                        </a>
                      </div>
                    )}

                    {selectedMP.phone && (
                      <div>
                        <h4 className="font-medium text-sm">Phone:</h4>
                        <a href={`tel:${selectedMP.phone}`} className="text-blue-600 hover:underline">
                          {selectedMP.phone}
                        </a>
                      </div>
                    )}

                    {selectedMP.postcodes && selectedMP.postcodes.length > 0 && (
                      <div>
                        <h4 className="font-medium text-sm">Sample Postcodes in Constituency:</h4>
                        <p className="text-gray-600">
                          {selectedMP.postcodes.slice(0, 5).join(', ')}
                          {selectedMP.postcodes.length > 5 ? '...' : ''}
                        </p>
                      </div>
                    )}
                  </div>
                </CardContent>
                <CardFooter>
                  <Button asChild className="w-full">
                    <a 
                      href={`https://members.parliament.uk/member/${selectedMP.parliamentId || selectedMP.id.replace('mp-', '')}/contact`} 
                      target="_blank" 
                      rel="noopener noreferrer"
                    >
                      Contact on Parliament Website
                    </a>
                  </Button>
                </CardFooter>
              </Card>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
}

// Use the MP interface from the API
type MP = ApiMP;

const partyColors = {
  'Conservative': 'party-conservative',
  'Labour': 'party-labour',
  'SNP': 'party-snp',
  'Green': 'party-green',
  'Liberal Democrat': 'party-libdem',
};

// Export the component as default
export default MPSearch;


  const fetchMPs = async () => {
    try {
      const data = await fetchWithFallback(
        () => apiService.getAllMPs(),
        () => fallbackData.mps()
      );
      setMps(data);
      setError(null);
    } catch (error) {
      console.error('Error fetching MPs:', error);
      setError('Failed to load MP data. Please try again later.');
    }
  };